{"componentChunkName":"component---src-pages-bm-benchmarks-js","path":"/bm/benchmarks/","result":{"data":{"allFile":{"edges":[{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/update_benchmarks.sh","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/latest/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / Elasticsearch","DPR / Elasticsearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)","Sentence Transformers / Elasticsearch"],"data":[{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Elasticsearch"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Elasticsearch"},{"map":66.26543444531747,"n_docs":10000,"model":"BM25 / Elasticsearch"},{"map":90.06638620360428,"n_docs":1000,"model":"Sentence Transformers / Elasticsearch"},{"map":87.11255142468549,"n_docs":10000,"model":"Sentence Transformers / Elasticsearch"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (HNSW)"},{"map":89.51337675393017,"n_docs":10000,"model":"DPR / FAISS (HNSW)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Milvus (flat)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (HNSW)"},{"map":88.24421129104469,"n_docs":10000,"model":"DPR / Milvus (HNSW)"},{"map":86.54606328368976,"n_docs":100000,"model":"DPR / Elasticsearch"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / Elasticsearch"},{"map":56.25299537353825,"n_docs":100000,"model":"BM25 / Elasticsearch"},{"map":45.595090262466535,"n_docs":500000,"model":"BM25 / Elasticsearch"},{"map":82.74686664920836,"n_docs":100000,"model":"Sentence Transformers / Elasticsearch"},{"map":76.49564526892904,"n_docs":500000,"model":"Sentence Transformers / Elasticsearch"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":84.33419639513305,"n_docs":100000,"model":"DPR / FAISS (HNSW)"},{"map":75.73062475537202,"n_docs":500000,"model":"DPR / FAISS (HNSW)"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / Milvus (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / Milvus (flat)"},{"map":81.63864883662649,"n_docs":100000,"model":"DPR / Milvus (HNSW)"},{"map":73.57986207906387,"n_docs":500000,"model":"DPR / Milvus (HNSW)"},{"map":74.20444712972909,"n_docs":1000,"model":"BM25 / Elasticsearch"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"4d904a02-8bc5-5cce-909f-89baae7abc2c","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/latest/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":82.58860575299659,"Model":"RoBERTa","index_speed":null,"Speed":125.81040525892848,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.87858491007042,"Model":"MiniLM","index_speed":null,"Speed":260.6443097981493,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.31182400443286,"Model":"BERT base","index_speed":null,"Speed":121.08066567525722,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":83.26306774734309,"Model":"BERT large","index_speed":null,"Speed":42.21949937744112,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":84.50422699207468,"Model":"XLM-RoBERTa","index_speed":null,"Speed":42.07400844838985,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":42.31925844723574,"Model":"DistilBERT","index_speed":null,"Speed":222.91207128366702,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/latest/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":71.36964873196698,"Speed":null,"model":"DPR / Elasticsearch","n_docs":100000,"query_speed":5.192368815242574,"map":86.54606328368976},{"F1":null,"Model":null,"index_speed":485.5602670200369,"Speed":null,"model":"BM25 / Elasticsearch","n_docs":100000,"query_speed":103.0884393334727,"map":56.25299537353825},{"F1":null,"Model":null,"index_speed":119.52937722555107,"Speed":null,"model":"Sentence Transformers / Elasticsearch","n_docs":100000,"query_speed":6.385621466857457,"map":82.74686664920836},{"F1":null,"Model":null,"index_speed":100.01184910084558,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.6270933964840415,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":89.90389306648805,"Speed":null,"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":39.7839528511866,"map":84.33419639513305},{"F1":null,"Model":null,"index_speed":116.00982709720004,"Speed":null,"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.57264344960955,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":115.61076852516383,"Speed":null,"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":38.80526238789059,"map":81.63864883662649}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. We use a cosine similarity function with BM25 retrievers, and dot product with DPR. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/latest/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / Elasticsearch","DPR / Elasticsearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)","Sentence Transformers / Elasticsearch"],"data":[{"model":"DPR / Elasticsearch","n_docs":1000,"query_speed":34.22768858415144},{"model":"DPR / Elasticsearch","n_docs":10000,"query_speed":22.197089725786853},{"model":"BM25 / Elasticsearch","n_docs":10000,"query_speed":127.11481826852273},{"model":"Sentence Transformers / Elasticsearch","n_docs":1000,"query_speed":47.51341215808855},{"model":"Sentence Transformers / Elasticsearch","n_docs":10000,"query_speed":29.74515869340777},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":42.49634272581313},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":27.684040507849826},{"model":"DPR / FAISS (HNSW)","n_docs":1000,"query_speed":43.36685860983961},{"model":"DPR / FAISS (HNSW)","n_docs":10000,"query_speed":41.819147130090286},{"model":"DPR / Milvus (flat)","n_docs":1000,"query_speed":41.12204778755844},{"model":"DPR / Milvus (flat)","n_docs":10000,"query_speed":37.86882443918513},{"model":"DPR / Milvus (HNSW)","n_docs":1000,"query_speed":41.14803671045185},{"model":"DPR / Milvus (HNSW)","n_docs":10000,"query_speed":40.072871546542935},{"model":"DPR / Elasticsearch","n_docs":100000,"query_speed":5.192368815242574},{"model":"DPR / Elasticsearch","n_docs":500000,"query_speed":1.0337466563959614},{"model":"BM25 / Elasticsearch","n_docs":100000,"query_speed":103.0884393334727},{"model":"BM25 / Elasticsearch","n_docs":500000,"query_speed":78.95037031647355},{"model":"Sentence Transformers / Elasticsearch","n_docs":100000,"query_speed":6.385621466857457},{"model":"Sentence Transformers / Elasticsearch","n_docs":500000,"query_speed":1.4175454254854258},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.6270933964840415},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.5394964631878052},{"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":39.7839528511866},{"model":"DPR / FAISS (HNSW)","n_docs":500000,"query_speed":39.84177061191119},{"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.57264344960955},{"model":"DPR / Milvus (flat)","n_docs":500000,"query_speed":15.645867393099733},{"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":38.80526238789059},{"model":"DPR / Milvus (HNSW)","n_docs":500000,"query_speed":37.15717318924075},{"model":"BM25 / Elasticsearch","n_docs":1000,"query_speed":282.95914917837337}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.4.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"map":0.929,"n_docs":1000,"model":"DPR / ElasticSearch"},{"map":0.898,"n_docs":10000,"model":"DPR / ElasticSearch"},{"map":0.863,"n_docs":100000,"model":"DPR / ElasticSearch"},{"map":0.805,"n_docs":500000,"model":"DPR / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":0.898,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":0.863,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":0.805,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":0.748,"n_docs":1000,"model":"BM25 / ElasticSearch"},{"map":0.6609999999999999,"n_docs":10000,"model":"BM25 / ElasticSearch"},{"map":0.56,"n_docs":100000,"model":"BM25 / ElasticSearch"},{"map":0.452,"n_docs":500000,"model":"BM25 / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (HSNW)"},{"map":0.8959999999999999,"n_docs":10000,"model":"DPR / FAISS (HSNW)"},{"map":0.8490000000000001,"n_docs":100000,"model":"DPR / FAISS (HSNW)"},{"map":0.7659999999999999,"n_docs":500000,"model":"DPR / FAISS (HSNW)"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"ba80b54e-181e-550e-8290-67e3f6795074","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.4.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":80.67985794671885,"Model":"RoBERTa","index_speed":null,"Speed":92.3039712094936,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.23306265318686,"Model":"MiniLM","index_speed":null,"Speed":98.62387044489223,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.90271600053505,"Model":"BERT base","index_speed":null,"Speed":99.92750782409666,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":82.64545708097472,"Model":"BERT large","index_speed":null,"Speed":39.529824033964466,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":85.26275190954586,"Model":"XLM-RoBERTa","index_speed":null,"Speed":39.29142006004379,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.4.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":79.54165185,"Speed":null,"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.5360000000000005,"map":0.863},{"F1":null,"Model":null,"index_speed":107.8662479,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":5.044,"map":0.863},{"F1":null,"Model":null,"index_speed":476.9143596,"Speed":null,"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.996,"map":0.56},{"F1":null,"Model":null,"index_speed":92.24548333,"Speed":null,"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.815,"map":0.8490000000000001}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.4.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Docs/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"model":"DPR / ElasticSearch","n_docs":1000,"query_speed":40.802},{"model":"DPR / ElasticSearch","n_docs":10000,"query_speed":27.006999999999998},{"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.5360000000000005},{"model":"DPR / ElasticSearch","n_docs":500000,"query_speed":1.514},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":40.048},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":23.976999999999997},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":5.044},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.091},{"model":"BM25 / ElasticSearch","n_docs":1000,"query_speed":232.97799999999998},{"model":"BM25 / ElasticSearch","n_docs":10000,"query_speed":167.81},{"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.996},{"model":"BM25 / ElasticSearch","n_docs":500000,"query_speed":95.491},{"model":"DPR / FAISS (HSNW)","n_docs":1000,"query_speed":37.884},{"model":"DPR / FAISS (HSNW)","n_docs":10000,"query_speed":33.421},{"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.815},{"model":"DPR / FAISS (HSNW)","n_docs":500000,"query_speed":3.259}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.5.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"map":0.929,"n_docs":1000,"model":"DPR / ElasticSearch"},{"map":0.898,"n_docs":10000,"model":"DPR / ElasticSearch"},{"map":0.863,"n_docs":100000,"model":"DPR / ElasticSearch"},{"map":0.805,"n_docs":500000,"model":"DPR / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":0.898,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":0.863,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":0.805,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":0.748,"n_docs":1000,"model":"BM25 / ElasticSearch"},{"map":0.6609999999999999,"n_docs":10000,"model":"BM25 / ElasticSearch"},{"map":0.56,"n_docs":100000,"model":"BM25 / ElasticSearch"},{"map":0.452,"n_docs":500000,"model":"BM25 / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (HSNW)"},{"map":0.8959999999999999,"n_docs":10000,"model":"DPR / FAISS (HSNW)"},{"map":0.8490000000000001,"n_docs":100000,"model":"DPR / FAISS (HSNW)"},{"map":0.7659999999999999,"n_docs":500000,"model":"DPR / FAISS (HSNW)"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"5f7fd232-f148-5913-884b-462f861f1a3d","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.5.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":80.67985794671885,"Model":"RoBERTa","index_speed":null,"Speed":92.3039712094936,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.23306265318686,"Model":"MiniLM","index_speed":null,"Speed":98.62387044489223,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.90271600053505,"Model":"BERT base","index_speed":null,"Speed":99.92750782409666,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":82.64545708097472,"Model":"BERT large","index_speed":null,"Speed":39.529824033964466,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":85.26275190954586,"Model":"XLM-RoBERTa","index_speed":null,"Speed":39.29142006004379,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.5.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":79.54165185,"Speed":null,"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.5360000000000005,"map":86.3},{"F1":null,"Model":null,"index_speed":107.8662479,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":5.044,"map":86.3},{"F1":null,"Model":null,"index_speed":476.9143596,"Speed":null,"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.996,"map":56},{"F1":null,"Model":null,"index_speed":92.24548333,"Speed":null,"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.815,"map":84.9}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.5.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"model":"DPR / ElasticSearch","n_docs":1000,"query_speed":40.802},{"model":"DPR / ElasticSearch","n_docs":10000,"query_speed":27.006999999999998},{"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.5360000000000005},{"model":"DPR / ElasticSearch","n_docs":500000,"query_speed":1.514},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":40.048},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":23.976999999999997},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":5.044},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.091},{"model":"BM25 / ElasticSearch","n_docs":1000,"query_speed":232.97799999999998},{"model":"BM25 / ElasticSearch","n_docs":10000,"query_speed":167.81},{"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.996},{"model":"BM25 / ElasticSearch","n_docs":500000,"query_speed":95.491},{"model":"DPR / FAISS (HSNW)","n_docs":1000,"query_speed":37.884},{"model":"DPR / FAISS (HSNW)","n_docs":10000,"query_speed":33.421},{"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.815},{"model":"DPR / FAISS (HSNW)","n_docs":500000,"query_speed":3.259}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.6.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"map":0.929,"n_docs":1000,"model":"DPR / ElasticSearch"},{"map":0.881,"n_docs":10000,"model":"DPR / ElasticSearch"},{"map":0.821,"n_docs":100000,"model":"DPR / ElasticSearch"},{"map":0.73,"n_docs":500000,"model":"DPR / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":0.898,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":0.863,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":0.805,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":0.748,"n_docs":1000,"model":"BM25 / ElasticSearch"},{"map":0.6609999999999999,"n_docs":10000,"model":"BM25 / ElasticSearch"},{"map":0.56,"n_docs":100000,"model":"BM25 / ElasticSearch"},{"map":0.452,"n_docs":500000,"model":"BM25 / ElasticSearch"},{"map":0.929,"n_docs":1000,"model":"DPR / FAISS (HSNW)"},{"map":0.896,"n_docs":10000,"model":"DPR / FAISS (HSNW)"},{"map":0.849,"n_docs":100000,"model":"DPR / FAISS (HSNW)"},{"map":0.766,"n_docs":500000,"model":"DPR / FAISS (HSNW)"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"497a79dd-8af6-5112-aa79-44e8d8ca013e","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.6.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":82.62983412843887,"Model":"RoBERTa","index_speed":null,"Speed":98.86638639776464,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.90026641413856,"Model":"MiniLM","index_speed":null,"Speed":181.96379531485616,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.32668866064459,"Model":"BERT base","index_speed":null,"Speed":106.04748306200683,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":83.29492827667042,"Model":"BERT large","index_speed":null,"Speed":40.408497243719076,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":84.62174414643722,"Model":"XLM-RoBERTa","index_speed":null,"Speed":40.483264542292716,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":42.34251326195393,"Model":"DistilBERT","index_speed":null,"Speed":160.41712955027901,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.6.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":73.93635160290218,"Speed":null,"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.23,"map":82},{"F1":null,"Model":null,"index_speed":104.77116699738369,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":4.89,"map":86.3},{"F1":null,"Model":null,"index_speed":484.32931514144724,"Speed":null,"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.59,"map":56},{"F1":null,"Model":null,"index_speed":91.41086878008392,"Speed":null,"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.85,"map":84.9}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.6.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"model":"DPR / ElasticSearch","n_docs":1000,"query_speed":40.802},{"model":"DPR / ElasticSearch","n_docs":10000,"query_speed":24.8},{"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.23},{"model":"DPR / ElasticSearch","n_docs":500000,"query_speed":1.45},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":40.048},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":22.47},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":4.9},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.08},{"model":"BM25 / ElasticSearch","n_docs":1000,"query_speed":232.97799999999998},{"model":"BM25 / ElasticSearch","n_docs":10000,"query_speed":248.97},{"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.59},{"model":"BM25 / ElasticSearch","n_docs":500000,"query_speed":91.39},{"model":"DPR / FAISS (HSNW)","n_docs":1000,"query_speed":37.884},{"model":"DPR / FAISS (HSNW)","n_docs":10000,"query_speed":31.34},{"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":12.85},{"model":"DPR / FAISS (HSNW)","n_docs":500000,"query_speed":3.32}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.7.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"map":88.26183154948457,"n_docs":10000,"model":"DPR / ElasticSearch"},{"map":82.47044752499787,"n_docs":100000,"model":"DPR / ElasticSearch"},{"map":73.4952735751035,"n_docs":500000,"model":"DPR / ElasticSearch"},{"map":66.33019927857616,"n_docs":10000,"model":"BM25 / ElasticSearch"},{"map":56.25959153101251,"n_docs":100000,"model":"BM25 / ElasticSearch"},{"map":45.60339705629754,"n_docs":500000,"model":"BM25 / ElasticSearch"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":86.54606328368972,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":80.8613722823409,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":89.69941373746582,"n_docs":10000,"model":"DPR / FAISS (HSNW)"},{"map":85.07984377595874,"n_docs":100000,"model":"DPR / FAISS (HSNW)"},{"map":76.91475821598232,"n_docs":500000,"model":"DPR / FAISS (HSNW)"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"bb23313d-8b74-5fe0-bc09-57c93f165a35","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.7.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":82.58860575299659,"Model":"RoBERTa","index_speed":null,"Speed":128.25544874114064,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.87858491007042,"Model":"MiniLM","index_speed":null,"Speed":269.33155450679567,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.31182400443286,"Model":"BERT base","index_speed":null,"Speed":123.82266420208393,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":83.26306774734309,"Model":"BERT large","index_speed":null,"Speed":43.188105620245494,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":84.50422699207468,"Model":"XLM-RoBERTa","index_speed":null,"Speed":42.956527893643,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":42.31925844723574,"Model":"DistilBERT","index_speed":null,"Speed":226.281948654048,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.7.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":70.7842323095542,"Speed":null,"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.108417678791537,"map":82.47044752499787},{"F1":null,"Model":null,"index_speed":486.8274411916137,"Speed":null,"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.40717155994315,"map":56.25959153101251},{"F1":null,"Model":null,"index_speed":98.76191471019415,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.614453113633132,"map":86.54606328368972},{"F1":null,"Model":null,"index_speed":86.8695584169603,"Speed":null,"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":38.24323466239034,"map":85.07984377595874}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.7.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HSNW)"],"data":[{"model":"DPR / ElasticSearch","n_docs":10000,"query_speed":23.3662850838307},{"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":6.108417678791537},{"model":"DPR / ElasticSearch","n_docs":500000,"query_speed":1.4393100251286972},{"model":"BM25 / ElasticSearch","n_docs":10000,"query_speed":244.5160214986071},{"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":162.40717155994315},{"model":"BM25 / ElasticSearch","n_docs":500000,"query_speed":88.52692529827672},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":27.22085301792775},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.614453113633132},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.5222363376940002},{"model":"DPR / FAISS (HSNW)","n_docs":10000,"query_speed":39.903073511580295},{"model":"DPR / FAISS (HSNW)","n_docs":100000,"query_speed":38.24323466239034},{"model":"DPR / FAISS (HSNW)","n_docs":500000,"query_speed":37.13917579922844}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.8.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)"],"data":[{"map":89.87097014904356,"n_docs":10000,"model":"DPR / ElasticSearch"},{"map":56.259591531012504,"n_docs":100000,"model":"BM25 / ElasticSearch"},{"map":66.33019927857616,"n_docs":10000,"model":"BM25 / ElasticSearch"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / ElasticSearch"},{"map":74.20444712972909,"n_docs":1000,"model":"BM25 / ElasticSearch"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / ElasticSearch"},{"map":45.60339705629754,"n_docs":500000,"model":"BM25 / ElasticSearch"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / ElasticSearch"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":89.49563682134192,"n_docs":10000,"model":"DPR / FAISS (HNSW)"},{"map":84.33419639513305,"n_docs":100000,"model":"DPR / FAISS (HNSW)"},{"map":75.73315903145605,"n_docs":500000,"model":"DPR / FAISS (HNSW)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (HNSW)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Milvus (flat)"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / Milvus (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / Milvus (flat)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (HNSW)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Milvus (HNSW)"},{"map":74.85616575291942,"n_docs":500000,"model":"DPR / Milvus (HNSW)"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / Milvus (HNSW)"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"6a3df8b8-6d31-5b2d-9183-d1a9bb11da54","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.8.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":82.58860575299659,"Model":"RoBERTa","index_speed":null,"Speed":125.81040525892848,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.87858491007042,"Model":"MiniLM","index_speed":null,"Speed":260.6443097981493,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.31182400443286,"Model":"BERT base","index_speed":null,"Speed":121.08066567525722,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":83.26306774734309,"Model":"BERT large","index_speed":null,"Speed":42.21949937744112,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":84.50422699207468,"Model":"XLM-RoBERTa","index_speed":null,"Speed":42.07400844838985,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":42.31925844723574,"Model":"DistilBERT","index_speed":null,"Speed":222.91207128366702,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.8.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":485.5602670200369,"Speed":null,"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":165.51512861040828,"map":56.259591531012504},{"F1":null,"Model":null,"index_speed":71.36964873196698,"Speed":null,"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":5.355677072083696,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":100.01184910084558,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.624479268751268,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":89.90389306648805,"Speed":null,"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":40.68196225525062,"map":84.33419639513305},{"F1":null,"Model":null,"index_speed":116.00982709720004,"Speed":null,"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.30393009791128,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":115.61076852516383,"Speed":null,"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":28.076443272229284,"map":86.54606328368973}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. We use a cosine similarity function with BM25 retrievers, and dot product with DPR. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.8.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / ElasticSearch","DPR / ElasticSearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)"],"data":[{"model":"DPR / ElasticSearch","n_docs":10000,"query_speed":22.92376153263135},{"model":"BM25 / ElasticSearch","n_docs":100000,"query_speed":165.51512861040828},{"model":"BM25 / ElasticSearch","n_docs":10000,"query_speed":260.2575025618042},{"model":"DPR / ElasticSearch","n_docs":1000,"query_speed":34.64504401787953},{"model":"BM25 / ElasticSearch","n_docs":1000,"query_speed":357.3482189096959},{"model":"DPR / ElasticSearch","n_docs":100000,"query_speed":5.355677072083696},{"model":"BM25 / ElasticSearch","n_docs":500000,"query_speed":90.8126875640674},{"model":"DPR / ElasticSearch","n_docs":500000,"query_speed":1.2322912620168611},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":40.40867245729847},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.5414031869280982},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":28.034963597300674},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.624479268751268},{"model":"DPR / FAISS (HNSW)","n_docs":10000,"query_speed":42.12400556900196},{"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":40.68196225525062},{"model":"DPR / FAISS (HNSW)","n_docs":500000,"query_speed":39.42722374998517},{"model":"DPR / FAISS (HNSW)","n_docs":1000,"query_speed":44.31880791041422},{"model":"DPR / Milvus (flat)","n_docs":1000,"query_speed":40.48084417170779},{"model":"DPR / Milvus (flat)","n_docs":10000,"query_speed":38.132788329389},{"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.30393009791128},{"model":"DPR / Milvus (flat)","n_docs":500000,"query_speed":15.30425741318099},{"model":"DPR / Milvus (HNSW)","n_docs":1000,"query_speed":40.38894718145225},{"model":"DPR / Milvus (HNSW)","n_docs":10000,"query_speed":38.15488156137084},{"model":"DPR / Milvus (HNSW)","n_docs":500000,"query_speed":24.503220592922823},{"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":28.076443272229284}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.9.0/site/en/map/retriever_map.json","childMapJson":{"axis":[{"y":"mAP","x":"Number of docs"}],"chart_type":"LineChart","columns":["n_docs","BM25 / Elasticsearch","DPR / Elasticsearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)","Sentence Transformers / Elasticsearch"],"data":[{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Elasticsearch"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Elasticsearch"},{"map":66.26543444531747,"n_docs":10000,"model":"BM25 / Elasticsearch"},{"map":90.06638620360428,"n_docs":1000,"model":"Sentence Transformers / Elasticsearch"},{"map":87.11255142468549,"n_docs":10000,"model":"Sentence Transformers / Elasticsearch"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / FAISS (flat)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / FAISS (HNSW)"},{"map":89.51337675393017,"n_docs":10000,"model":"DPR / FAISS (HNSW)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (flat)"},{"map":89.87097014904354,"n_docs":10000,"model":"DPR / Milvus (flat)"},{"map":92.95105322830891,"n_docs":1000,"model":"DPR / Milvus (HNSW)"},{"map":88.24421129104469,"n_docs":10000,"model":"DPR / Milvus (HNSW)"},{"map":86.54606328368976,"n_docs":100000,"model":"DPR / Elasticsearch"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / Elasticsearch"},{"map":56.25299537353825,"n_docs":100000,"model":"BM25 / Elasticsearch"},{"map":45.595090262466535,"n_docs":500000,"model":"BM25 / Elasticsearch"},{"map":82.74686664920836,"n_docs":100000,"model":"Sentence Transformers / Elasticsearch"},{"map":76.49564526892904,"n_docs":500000,"model":"Sentence Transformers / Elasticsearch"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / FAISS (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / FAISS (flat)"},{"map":84.33419639513305,"n_docs":100000,"model":"DPR / FAISS (HNSW)"},{"map":75.73062475537202,"n_docs":500000,"model":"DPR / FAISS (HNSW)"},{"map":86.54606328368973,"n_docs":100000,"model":"DPR / Milvus (flat)"},{"map":80.86137228234091,"n_docs":500000,"model":"DPR / Milvus (flat)"},{"map":81.63864883662649,"n_docs":100000,"model":"DPR / Milvus (HNSW)"},{"map":73.57986207906387,"n_docs":500000,"model":"DPR / Milvus (HNSW)"},{"map":74.20444712972909,"n_docs":1000,"model":"BM25 / Elasticsearch"}],"description":"Here you can see how the mean avg. precision (mAP) of the retriever decays as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","id":"1f6fcb04-0df9-56f2-94df-560fd40c8da6","title":"Retriever Accuracy","subtitle":"mAP at different number of docs"},"childSpeedJson":null,"childPerformanceJson":null}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.9.0/site/en/performance/reader_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":null,"bars":"horizontal","chart_type":"BarChart","columns":["Model","F1","Speed (passages/sec)"],"data":[{"F1":82.58860575299659,"Model":"RoBERTa","index_speed":null,"Speed":125.81040525892848,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":78.87858491007042,"Model":"MiniLM","index_speed":null,"Speed":260.6443097981493,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":74.31182400443286,"Model":"BERT base","index_speed":null,"Speed":121.08066567525722,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":83.26306774734309,"Model":"BERT large","index_speed":null,"Speed":42.21949937744112,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":84.50422699207468,"Model":"XLM-RoBERTa","index_speed":null,"Speed":42.07400844838985,"model":null,"n_docs":null,"query_speed":null,"map":null},{"F1":42.31925844723574,"Model":"DistilBERT","index_speed":null,"Speed":222.91207128366702,"model":null,"n_docs":null,"query_speed":null,"map":null}],"description":"Performance benchmarks of different Readers that can be used off-the-shelf in Haystack. Some models are geared towards speed, while others are more performance-focused. Accuracy is measured as F1 score and speed as passages/sec (with passages of 384 tokens).  Each Reader is benchmarked using the SQuAD v2.0 development set, which contains 11866 question answer pairs. When tokenized using the BERT tokenizer and split using a sliding window approach, these become 12350 passages that are passed into the model. We set <i>max_seq_len=384</i> and <i>doc_stride=128</i>. These benchmarking tests are run using an AWS p3.2xlarge instance with a Nvidia V100 GPU with this <a href='https://github.com/deepset-ai/haystack/blob/master/test/benchmarks/reader.py'>script</a>. Please note that we are using the FARMReader class rather than the TransformersReader class. Also, the F1 measure that is reported here is in fact calculated on token level, rather than word level as is done in the official SQuAD script.","series":null,"subtitle":"Time and Accuracy Benchmarks","title":"Reader Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.9.0/site/en/performance/retriever_performance.json","childMapJson":null,"childSpeedJson":null,"childPerformanceJson":{"axes":{"label":"map","time_label":"seconds","time_side":"top"},"bars":"horizontal","chart_type":"BarChart","columns":["Model","mAP","Index Speed (docs/sec)","Query Speed (queries/sec)"],"data":[{"F1":null,"Model":null,"index_speed":71.36964873196698,"Speed":null,"model":"DPR / Elasticsearch","n_docs":100000,"query_speed":5.192368815242574,"map":86.54606328368976},{"F1":null,"Model":null,"index_speed":485.5602670200369,"Speed":null,"model":"BM25 / Elasticsearch","n_docs":100000,"query_speed":103.0884393334727,"map":56.25299537353825},{"F1":null,"Model":null,"index_speed":119.52937722555107,"Speed":null,"model":"Sentence Transformers / Elasticsearch","n_docs":100000,"query_speed":6.385621466857457,"map":82.74686664920836},{"F1":null,"Model":null,"index_speed":100.01184910084558,"Speed":null,"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.6270933964840415,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":89.90389306648805,"Speed":null,"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":39.7839528511866,"map":84.33419639513305},{"F1":null,"Model":null,"index_speed":116.00982709720004,"Speed":null,"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.57264344960955,"map":86.54606328368973},{"F1":null,"Model":null,"index_speed":115.61076852516383,"Speed":null,"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":38.80526238789059,"map":81.63864883662649}],"description":"Comparison of the speed and accuracy of different DocumentStore / Retriever combinations on 100k documents. <b>Indexing speed</b> (in docs/sec) refers to how quickly Documents can be inserted into a DocumentStore. <b>Querying speed</b> (in queries/sec) refers to the speed at which the system returns relevant Documents when presented with a query.\n\nThe dataset used is Wikipedia, split into 100 word passages (from <a href='https://github.com/facebookresearch/DPR/blob/master/dpr/data/download_data.py'>here</a>)). \n\nFor querying, we use the Natural Questions development set in combination with the wiki passages. The Document Store is populated with the 100 word passages in which the answer spans occur (i.e. gold passages) as well as a random selection of 100 word passages in which the answer spans do not occur (i.e. negative passages). We take a total of 100k gold and negative passages. Query and document embedding are generated by the <i>\"facebook/dpr-question_encoder-single-nq-base\"</i> and <i>\"facebook/dpr-ctx_encoder-single-nq-base\"</i> models. The retriever returns 10 candidates and both the recall and mAP scores are calculated on these 10.\n\nFor FAISS HNSW, we use <i>n_links=128</i>, <i>efSearch=20</i> and <i>efConstruction=80</i>. We use a cosine similarity function with BM25 retrievers, and dot product with DPR. Both index and query benchmarks are performed on an AWS P3.2xlarge instance which is accelerated by an Nvidia V100 GPU.","series":{"s0":"map","s1":"time","s2":"time"},"subtitle":"Time and Accuracy Benchmarks","title":"Retriever Performance"}}},{"node":{"absolutePath":"/home/runner/work/haystack-website/haystack-website/src/pages/benchmarks/versions/v0.9.0/site/en/speed/retriever_speed.json","childMapJson":null,"childSpeedJson":{"axis":[{"x":"Number of docs","y":"Queries/sec"}],"chart_type":"LineChart","columns":["n_docs","BM25 / Elasticsearch","DPR / Elasticsearch","DPR / FAISS (flat)","DPR / FAISS (HNSW)","DPR / Milvus (flat)","DPR / Milvus (HNSW)","Sentence Transformers / Elasticsearch"],"data":[{"model":"DPR / Elasticsearch","n_docs":1000,"query_speed":34.22768858415144},{"model":"DPR / Elasticsearch","n_docs":10000,"query_speed":22.197089725786853},{"model":"BM25 / Elasticsearch","n_docs":10000,"query_speed":127.11481826852273},{"model":"Sentence Transformers / Elasticsearch","n_docs":1000,"query_speed":47.51341215808855},{"model":"Sentence Transformers / Elasticsearch","n_docs":10000,"query_speed":29.74515869340777},{"model":"DPR / FAISS (flat)","n_docs":1000,"query_speed":42.49634272581313},{"model":"DPR / FAISS (flat)","n_docs":10000,"query_speed":27.684040507849826},{"model":"DPR / FAISS (HNSW)","n_docs":1000,"query_speed":43.36685860983961},{"model":"DPR / FAISS (HNSW)","n_docs":10000,"query_speed":41.819147130090286},{"model":"DPR / Milvus (flat)","n_docs":1000,"query_speed":41.12204778755844},{"model":"DPR / Milvus (flat)","n_docs":10000,"query_speed":37.86882443918513},{"model":"DPR / Milvus (HNSW)","n_docs":1000,"query_speed":41.14803671045185},{"model":"DPR / Milvus (HNSW)","n_docs":10000,"query_speed":40.072871546542935},{"model":"DPR / Elasticsearch","n_docs":100000,"query_speed":5.192368815242574},{"model":"DPR / Elasticsearch","n_docs":500000,"query_speed":1.0337466563959614},{"model":"BM25 / Elasticsearch","n_docs":100000,"query_speed":103.0884393334727},{"model":"BM25 / Elasticsearch","n_docs":500000,"query_speed":78.95037031647355},{"model":"Sentence Transformers / Elasticsearch","n_docs":100000,"query_speed":6.385621466857457},{"model":"Sentence Transformers / Elasticsearch","n_docs":500000,"query_speed":1.4175454254854258},{"model":"DPR / FAISS (flat)","n_docs":100000,"query_speed":6.6270933964840415},{"model":"DPR / FAISS (flat)","n_docs":500000,"query_speed":1.5394964631878052},{"model":"DPR / FAISS (HNSW)","n_docs":100000,"query_speed":39.7839528511866},{"model":"DPR / FAISS (HNSW)","n_docs":500000,"query_speed":39.84177061191119},{"model":"DPR / Milvus (flat)","n_docs":100000,"query_speed":28.57264344960955},{"model":"DPR / Milvus (flat)","n_docs":500000,"query_speed":15.645867393099733},{"model":"DPR / Milvus (HNSW)","n_docs":100000,"query_speed":38.80526238789059},{"model":"DPR / Milvus (HNSW)","n_docs":500000,"query_speed":37.15717318924075},{"model":"BM25 / Elasticsearch","n_docs":1000,"query_speed":282.95914917837337}],"description":"Here you can see how the query speed of different Retriever / DocumentStore combinations scale as the number of documents increases. The set up is the same as the above querying benchmark except that a varying number of negative documents are used to fill the document store.","subtitle":"Query Speed at different number of docs","title":"Retriever Speed"},"childPerformanceJson":null}}]}},"pageContext":{"locale":"en","newestVersion":"v0.0.0"}},"staticQueryHashes":["3895693482"]}